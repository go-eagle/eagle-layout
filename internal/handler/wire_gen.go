// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package handler

import (
	"github.com/go-eagle/eagle-layout/internal/dal"
	"github.com/go-eagle/eagle-layout/internal/dal/cache"
	"github.com/go-eagle/eagle-layout/internal/handler/v1"
	"github.com/go-eagle/eagle-layout/internal/repository"
	"github.com/go-eagle/eagle-layout/internal/service"
	"github.com/go-eagle/eagle/pkg/redis"
)

// Injectors from wire.go:

func NewHandler() (*Handler, func(), error) {
	dbClient, cleanup, err := dal.Init()
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := redis.Init()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userCache := cache.NewUserCache(client)
	userRepo := repository.NewUserRepo(dbClient, userCache)
	userService := service.NewUserService(userRepo)
	loginHandler := v1.NewLoginHandler(userService)
	registerHandler := v1.NewRegisterHandler(userService)
	handler := &Handler{
		Login:    loginHandler,
		Register: registerHandler,
	}
	return handler, func() {
		cleanup2()
		cleanup()
	}, nil
}
