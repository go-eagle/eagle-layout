// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-eagle/eagle-layout/internal/dal"
	"github.com/go-eagle/eagle-layout/internal/dal/cache"
	"github.com/go-eagle/eagle-layout/internal/repository"
	"github.com/go-eagle/eagle-layout/internal/server"
	"github.com/go-eagle/eagle-layout/internal/service"
	"github.com/go-eagle/eagle-layout/internal/tasks"
	"github.com/go-eagle/eagle/pkg/app"
	"github.com/go-eagle/eagle/pkg/log"
	"github.com/go-eagle/eagle/pkg/redis"
	redis2 "github.com/go-eagle/eagle/pkg/transport/consumer/redis"
	"github.com/go-eagle/eagle/pkg/transport/http"
)

// Injectors from wire.go:

func InitApp(cfg *app.Config, config *app.ServerConfig, tc *tasks.Config) (*app.App, func(), error) {
	dbClient, cleanup, err := dal.Init()
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := redis.Init()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userCache := cache.NewUserCache(client)
	userRepo := repository.NewUserRepo(dbClient, userCache)
	userServiceServer := service.NewUserServiceServer(userRepo)
	httpServer := server.NewHTTPServer(cfg, userServiceServer)
	redisServer := server.NewRedisConsumerServer(tc)
	appApp := newApp(cfg, httpServer, redisServer)
	return appApp, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

// 第三个参数需要根据使用的server 进行调整
// 默认使用 redis, 如果使用 rabbitmq 可以改为: rs *rabbitmq.Server
// 然后执行 wire
func newApp(cfg *app.Config, hs *http.Server, rs *redis2.Server) *app.App {
	return app.New(app.WithName(cfg.Name), app.WithVersion(cfg.Version), app.WithLogger(log.GetLogger()), app.WithServer(

		hs,

		rs,
	),
	)
}
